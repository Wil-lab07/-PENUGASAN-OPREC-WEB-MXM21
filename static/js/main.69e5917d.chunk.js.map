{"version":3,"sources":["logo.svg","Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["Homepage","useState","quote","setQuote","author","setAuthor","isLoading","setIsLoading","isAppear","setIsAppear","getQuote","fetch","then","res","json","data","content","useEffect","setTimeout","className","src","alt","class","onClick","href","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,I,2BC0EAA,EAvEE,WAAO,IAAD,EAEOC,mBAAS,IAFhB,mBAEZC,EAFY,KAELC,EAFK,OAGSF,mBAAS,IAHlB,mBAGZG,EAHY,KAGJC,EAHI,OAMeJ,oBAAS,GANxB,mBAMZK,EANY,KAMDC,EANC,OAOaN,oBAAS,GAPtB,mBAOZO,EAPY,KAOFC,EAPE,KASbC,EAAW,WAQbC,MAAM,kCACDC,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAG,GACFZ,EAASY,EAAKC,SACdX,EAAUU,EAAKX,QACfG,GAAa,GACbE,GAAY,OAUxB,OANAQ,qBAAU,WACNC,YAAW,WACPR,MACD,OACJ,IAGC,sBAAKS,UAAU,WAAf,UACI,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,SAAf,UACI,qBAAKC,IAAI,mEAAmEC,IAAI,KAChF,2DAEJ,sBAAKF,UAAU,OAAf,UACKb,GACG,sBAAKgB,MAAQ,UAAb,UACI,qBAAKH,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,WAGtBX,GACG,sBAAKW,UAAU,UAAf,UACI,qBAAKA,UAAU,QAAf,SACI,6BAAKjB,MAET,qBAAKiB,UAAU,SAAf,SACI,8BArDV,cAqDwB,+BAAOf,kBAMzC,sBAAKe,UAAU,SAAf,UACI,mBAAGI,QAAWb,EAAd,mBACA,mBAAGc,KAAI,gDAA2CtB,EAA3C,cAAsDE,GAAUqB,OAAS,SAAhF,0BCxDDC,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCKSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.69e5917d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useState, useEffect} from 'react';\r\nimport Axios from 'axios';\r\n\r\nconst Homepage = () => {\r\n    \r\n    const [quote, setQuote] = useState([]);\r\n    const [author, setAuthor] = useState([]);\r\n    const writtenBy = \"Written by \";\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isAppear, setIsAppear] = useState(false);\r\n\r\n    const getQuote = () => {\r\n        // Axios.get(\"https://api.quotable.io/random\")\r\n        //     .then(res => {\r\n        //         setQuote(res.data.content);\r\n        //         setAuthor(res.data.author);\r\n        //         setIsLoading(false);\r\n        //         setIsAppear(true);\r\n        //     })\r\n        fetch('https://api.quotable.io/random')\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n            .then(data => {\r\n                setQuote(data.content);\r\n                setAuthor(data.author);\r\n                setIsLoading(false);\r\n                setIsAppear(true);\r\n            })\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setTimeout(()=>{\r\n            getQuote();\r\n        }, 1000)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Homepage\">\r\n            <div className=\"content\">\r\n                <div className=\"Header\">\r\n                    <img src=\"https://help.twitter.com/content/dam/help-twitter/brand/logo.png\" alt=\"\"/>\r\n                    <h2>Random Quote Generator</h2>\r\n                </div>\r\n                <div className=\"Main\">\r\n                    {isLoading && \r\n                        <div class = \"Loading\">\r\n                            <div className=\"obj\"></div>\r\n                            <div className=\"obj\"></div>\r\n                            <div className=\"obj\"></div>\r\n                            <div className=\"obj\"></div>\r\n                        </div>\r\n                    }\r\n                    {isAppear && \r\n                        <div className=\"Article\">\r\n                            <div className=\"Quote\">\r\n                                <h2>{quote}</h2>\r\n                            </div>\r\n                            <div className=\"Author\">\r\n                                <p>{writtenBy}<span>{author}</span></p>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"button\">\r\n                <a onClick = {getQuote}>Quote</a>\r\n                <a href={`https://twitter.com/intent/tweet?text=${quote} - ${author}`} target = \"_blank\">Tweet</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Homepage;","import logo from './logo.svg';\nimport './App.css';\nimport Homepage from './Homepage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}